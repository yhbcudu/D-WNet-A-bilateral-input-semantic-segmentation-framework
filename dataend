import os
import numpy as np
import torch
from torch.utils.data import Dataset
from skimage.transform import rotate, resize
from skimage.exposure import adjust_gamma, rescale_intensity
import rasterio

class LargeDataset(Dataset):
    def __init__(self, sar_dir, optical_dir, labels_dir, indices, num_classes, num_months, window_size=64, augment=False):
        self.sar_dir = sar_dir
        self.optical_dir = optical_dir
        self.labels_dir = labels_dir
        self.indices = indices
        self.num_classes = num_classes
        self.num_months = num_months
        self.window_size = window_size
        self.augment = augment

        if self.augment:
            self.augmentations = [
                self.random_rotation,
                self.random_resized_crop,
                self.random_horizontal_flip,
                self.random_vertical_flip,
                self.random_color_jitter
            ]

    def __len__(self):
        return len(self.indices)

    def random_rotation(self, image):
        return rotate(image, angle=np.random.uniform(-30, 30), mode='reflect')

    def random_resized_crop(self, image):
        scale = np.random.uniform(0.8, 1.2)
        return resize(image, output_shape=(int(image.shape[0] * scale), int(image.shape[1] * scale)), mode='reflect',
                      anti_aliasing=True)

    def random_horizontal_flip(self, image):
        if np.random.rand() > 0.5:
            return np.fliplr(image)
        return image

    def random_vertical_flip(self, image):
        if np.random.rand() > 0.5:
            return np.flipud(image)
        return image

    def random_color_jitter(self, image):
        image = self.normalize_image(image)
        return adjust_gamma(image, gamma=np.random.uniform(0.8, 1.2))

    def normalize_image(self, image):
        image = rescale_intensity(image, out_range=(0, 1))
        return image

    def augment_image(self, image):
        for aug in self.augmentations:
            image = aug(image)
        image = resize(image, output_shape=(self.window_size, self.window_size), mode='reflect', anti_aliasing=True)
        return image

    def __getitem__(self, idx):
        index = self.indices[idx]

        sar_batch = np.empty((self.num_months, self.window_size, self.window_size))
        optical_batch = np.empty((4, self.window_size, self.window_size))

        for month in range(1, self.num_months + 1):
            sar_path = os.path.join(self.sar_dir, str(month), f"{index}.tif")
            with rasterio.open(sar_path) as src:
                sar_img = src.read(1) / 255.0

            if self.augment:
                sar_img = self.augment_image(sar_img)
            else:
                sar_img = self.normalize_image(sar_img)

            sar_batch[month - 1] = sar_img

        optical_path = os.path.join(self.optical_dir, f"{index}.tif")
        with rasterio.open(optical_path) as src:
            optical_img = src.read([1, 2, 3, 4]) / 255.0

        if self.augment:
            optical_img = self.augment_image(optical_img.transpose(1, 2, 0)).transpose(2, 0, 1)
        else:
            optical_img = self.normalize_image(optical_img.transpose(1, 2, 0)).transpose(2, 0, 1)

        sar_batch = torch.from_numpy(sar_batch).float()
        optical_batch = torch.from_numpy(optical_img).float()

        if self.labels_dir:
            label_path = os.path.join(self.labels_dir, f"{index}.tif")
            with rasterio.open(label_path) as src:
                label_img = src.read(1).astype(int)

            if self.augment:
                label_img = self.augment_image(label_img)

            labels_batch = torch.from_numpy(label_img).long()
            return [sar_batch, optical_batch], labels_batch
        else:
            return [sar_batch, optical_batch]
