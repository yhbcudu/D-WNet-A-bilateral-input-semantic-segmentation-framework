import os
import numpy as np
import torch
from torch.utils.data import Dataset
from skimage.transform import rotate, resize
from skimage.exposure import adjust_gamma, rescale_intensity
import rasterio


class RandomDataset(Dataset):
    def __init__(self, num_samples, img_size, num_classes, num_months, window_size, stride, augment=False):
        self.num_samples = num_samples
        self.img_size = img_size
        self.num_classes = num_classes
        self.num_months = num_months
        self.window_size = window_size
        self.stride = stride
        self.augment = augment

        if self.augment:
            self.augmentations = [
                self.random_rotation,
                self.random_resized_crop,
                self.random_horizontal_flip,
                self.random_vertical_flip,
                self.random_color_jitter
            ]

    def __len__(self):
        return self.num_samples * ((self.img_size[0] - self.window_size) // self.stride + 1) * (
                    (self.img_size[1] - self.window_size) // self.stride + 1)

    def random_rotation(self, image):
        return rotate(image, angle=np.random.uniform(-30, 30), mode='reflect')

    def random_resized_crop(self, image):
        scale = np.random.uniform(0.8, 1.2)
        return resize(image, output_shape=(int(image.shape[0] * scale), int(image.shape[1] * scale)), mode='reflect',
                      anti_aliasing=True)

    def random_horizontal_flip(self, image):
        if np.random.rand() > 0.5:
            return np.fliplr(image)
        return image

    def random_vertical_flip(self, image):
        if np.random.rand() > 0.5:
            return np.flipud(image)
        return image

    def random_color_jitter(self, image):
        image = self.normalize_image(image)
        return adjust_gamma(image, gamma=np.random.uniform(0.8, 1.2))

    def normalize_image(self, image):
        image = rescale_intensity(image, out_range=(0, 1))
        return image

    def augment_image(self, image):
        if image.size == 0:
            raise ValueError("Empty image passed for augmentation")

        for aug in self.augmentations:
            image = aug(image)

        # Resize back to original size
        image = resize(image, output_shape=(self.window_size, self.window_size), mode='reflect', anti_aliasing=True)

        return image

    def __getitem__(self, idx):
        total_windows_per_image = ((self.img_size[0] - self.window_size) // self.stride + 1) * (
                    (self.img_size[1] - self.window_size) // self.stride + 1)
        image_idx = idx // total_windows_per_image
        window_idx = idx % total_windows_per_image

        i = (window_idx // ((self.img_size[1] - self.window_size) // self.stride + 1)) * self.stride
        j = (window_idx % ((self.img_size[1] - self.window_size) // self.stride + 1)) * self.stride

        sar_batch = np.random.randn(self.num_months, self.window_size, self.window_size).astype(np.float32)
        optical_batch = np.random.randn(4, self.window_size, self.window_size).astype(np.float32)

        if self.augment:
            for month in range(self.num_months):
                sar_batch[month] = self.augment_image(sar_batch[month])
            optical_batch = self.augment_image(optical_batch.transpose(1, 2, 0)).transpose(2, 0, 1)

        sar_batch = torch.from_numpy(sar_batch).float()
        optical_batch = torch.from_numpy(optical_batch).float()

        labels_batch = np.random.randint(0, self.num_classes, size=(self.window_size, self.window_size)).astype(
            np.int64)
        labels_batch = torch.from_numpy(labels_batch).long()

        return [sar_batch, optical_batch], labels_batch


# class SlidingWindowDataset(Dataset):
#     def __init__(self, sar_dir, optical_dir, labels_dir, indices, num_classes, num_months, window_size, stride,
#                  augment=False):
#         self.sar_dir = sar_dir
#         self.optical_dir = optical_dir
#         self.labels_dir = labels_dir
#         self.indices = indices
#         self.num_classes = num_classes
#         self.num_months = num_months
#         self.window_size = window_size
#         self.stride = stride
#         self.augment = augment
#
#         if self.augment:
#             self.augmentations = [
#                 self.random_rotation,
#                 self.random_resized_crop,
#                 self.random_horizontal_flip,
#                 self.random_vertical_flip,
#                 self.random_color_jitter
#             ]
#
#     def __len__(self):
#         return len(self.indices) * ((18929 - self.window_size) // self.stride + 1) * (
#                     (6748 - self.window_size) // self.stride + 1)
#
#     def random_rotation(self, image):
#         return rotate(image, angle=np.random.uniform(-30, 30), mode='reflect')
#
#     def random_resized_crop(self, image):
#         scale = np.random.uniform(0.8, 1.2)
#         return resize(image, output_shape=(int(image.shape[0] * scale), int(image.shape[1] * scale)), mode='reflect',
#                       anti_aliasing=True)
#
#     def random_horizontal_flip(self, image):
#         if np.random.rand() > 0.5:
#             return np.fliplr(image)
#         return image
#
#     def random_vertical_flip(self, image):
#         if np.random.rand() > 0.5:
#             return np.flipud(image)
#         return image
#
#     def random_color_jitter(self, image):
#         image = self.normalize_image(image)
#         return adjust_gamma(image, gamma=np.random.uniform(0.8, 1.2))
#
#     def normalize_image(self, image):
#         image = rescale_intensity(image, out_range=(0, 1))
#         return image
#
#     def augment_image(self, image):
#         if image.size == 0:
#             raise ValueError("Empty image passed for augmentation")
#
#         for aug in self.augmentations:
#             image = aug(image)
#
#         # Resize back to original size
#         image = resize(image, output_shape=(self.window_size, self.window_size), mode='reflect', anti_aliasing=True)
#
#         return image
#
#     def __getitem__(self, idx):
#         total_windows_per_image = ((18929 - self.window_size) // self.stride + 1) * (
#                     (6748 - self.window_size) // self.stride + 1)
#         image_idx = idx // total_windows_per_image
#         window_idx = idx % total_windows_per_image
#
#         i = (window_idx // ((6748 - self.window_size) // self.stride + 1)) * self.stride
#         j = (window_idx % ((6748 - self.window_size) // self.stride + 1)) * self.stride
#
#         index = self.indices[image_idx]
#
#         sar_batch = np.empty((self.num_months, self.window_size, self.window_size))
#         optical_batch = np.empty((self.window_size, self.window_size, 4))
#
#         for month in range(1, self.num_months + 1):
#             sar_path = os.path.join(self.sar_dir, str(month), f"{index}.tif")
#             with rasterio.open(sar_path) as src:
#                 sar_img = src.read(1) / 255.0
#
#             if i + self.window_size > sar_img.shape[0] or j + self.window_size > sar_img.shape[1]:
#                 sar_window = np.zeros((self.window_size, self.window_size))
#             else:
#                 sar_window = sar_img[i:i + self.window_size, j:j + self.window_size]
#
#             if self.augment:
#                 sar_window = self.augment_image(sar_window)
#             else:
#                 sar_window = self.normalize_image(sar_window)
#
#             sar_batch[month - 1] = sar_window
#
#         optical_path = os.path.join(self.optical_dir, f"{index}.tif")
#         with rasterio.open(optical_path) as src:
#             optical_img = src.read([1, 2, 3, 4]) / 255.0
#
#         if i + self.window_size > optical_img.shape[1] or j + self.window_size > optical_img.shape[2]:
#             optical_window = np.zeros((4, self.window_size, self.window_size))
#         else:
#             optical_window = optical_img[:, i:i + self.window_size, j:j + self.window_size]
#
#         if self.augment:
#             optical_window = self.augment_image(optical_window.transpose(1, 2, 0)).transpose(2, 0, 1)
#         else:
#             optical_window = self.normalize_image(optical_window.transpose(1, 2, 0)).transpose(2, 0, 1)
#
#         sar_batch = torch.from_numpy(sar_batch).float()
#         optical_batch = torch.from_numpy(optical_window).float()
#
#         if self.labels_dir:
#             label_path = os.path.join(self.labels_dir, f"{index}.tif")
#             with rasterio.open(label_path) as src:
#                 label_img = src.read(1).astype(int)
#
#             if i + self.window_size > label_img.shape[0] or j + self.window_size > label_img.shape[1]:
#                 label_window = np.zeros((self.window_size, self.window_size), dtype=int)
#             else:
#                 label_window = label_img[i:i + self.window_size, j:j + self.window_size]
#
#             if self.augment:
#                 label_window = self.augment_image(label_window)
#
#             labels_batch = torch.from_numpy(label_window).long()
#             return [sar_batch, optical_batch], labels_batch
#         else:
#             return [sar_batch, optical_batch]

