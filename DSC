class DepthwiseSeparableConv(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, stride=1, padding=0):
        super(DepthwiseSeparableConv, self).__init__()
        self.depthwise = nn.Conv2d(in_channels, in_channels, kernel_size=kernel_size, stride=stride,
                                   padding=padding, groups=in_channels)
        self.pointwise = nn.Conv2d(in_channels, out_channels, kernel_size=1)

    def forward(self, x):
        print(f"  DepthwiseSeparableConv input: {x.shape}")
        x = self.depthwise(x)
        print(f"  After depthwise conv: {x.shape}")
        x = self.pointwise(x)
        print(f"  After pointwise conv: {x.shape}")
        return x


class OpticalEncoderBlock(nn.Module):
    def __init__(self, in_channels, out_channels, use_pooling=True):
        super(OpticalEncoderBlock, self).__init__()
        self.conv1 = DepthwiseSeparableConv(in_channels, out_channels, kernel_size=3, padding=1)
        self.conv2 = DepthwiseSeparableConv(out_channels, out_channels, kernel_size=3, padding=1)
        self.use_pooling = use_pooling
        if use_pooling:
            self.pool = nn.MaxPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        print(f"OpticalEncoderBlock input: {x.shape}")
        x = F.relu(self.conv1(x))
        print(f"After conv1 + relu: {x.shape}")
        x = F.relu(self.conv2(x))
        print(f"After conv2 + relu: {x.shape}")
        if self.use_pooling:
            x = self.pool(x)
            print(f"After pooling: {x.shape}")
        return x


class OpticalImageProcessingNetwork(nn.Module):
    def __init__(self, in_channels=4, out_channels=1024):
        super(OpticalImageProcessingNetwork, self).__init__()
        # 只前两层使用池化，后面层保持尺寸
        self.encoder1 = OpticalEncoderBlock(in_channels, 64, use_pooling=True)  # 64->32
        self.encoder2 = OpticalEncoderBlock(64, 128, use_pooling=True)  # 32->16
        self.encoder3 = OpticalEncoderBlock(128, 256, use_pooling=False)  # 16->16
        self.encoder4 = OpticalEncoderBlock(256, 512, use_pooling=False)  # 16->16
        self.encoder5 = OpticalEncoderBlock(512, 1024, use_pooling=False)  # 16->16

        # 上采样回到64x64
        self.upsample = nn.Upsample(size=(64, 64), mode='bilinear', align_corners=False)

    def forward(self, x):
        print(f"\n=== OpticalImageProcessingNetwork ===")
        print(f"Input to optical network: {x.shape}")

        print("\n--- Encoder 1 ---")
        x = self.encoder1(x)

        print("\n--- Encoder 2 ---")
        x = self.encoder2(x)

        print("\n--- Encoder 3 ---")
        x = self.encoder3(x)

        print("\n--- Encoder 4 ---")
        x = self.encoder4(x)

        print("\n--- Encoder 5 ---")
        x = self.encoder5(x)

        print(f"Before upsample: {x.shape}")
        x = self.upsample(x)
        print(f"OpticalImageProcessingNetwork output: {x.shape}")
        return x



